/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Log Viewer API
 * API for fetching and uploading logs
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetLogs200,
  GetLogsParams,
  PostUpload200,
  PostUpload400,
  PostUpload500,
  PostUploadBody
} from '../generated.schemas'



/**
 * @summary Upload log CSV file
 */
export const postUpload = (
    postUploadBody: PostUploadBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostUpload200>> => {
    
    const formData = new FormData();
formData.append('file', postUploadBody.file)

    return axios.default.post(
      `/upload`,
      formData,options
    );
  }



export const getPostUploadMutationOptions = <TError = AxiosError<PostUpload400 | PostUpload500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext> => {
    
const mutationKey = ['postUpload'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUpload>>, {data: PostUploadBody}> = (props) => {
          const {data} = props ?? {};

          return  postUpload(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postUpload>>>
    export type PostUploadMutationBody = PostUploadBody
    export type PostUploadMutationError = AxiosError<PostUpload400 | PostUpload500>

    /**
 * @summary Upload log CSV file
 */
export const usePostUpload = <TError = AxiosError<PostUpload400 | PostUpload500>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postUpload>>,
        TError,
        {data: PostUploadBody},
        TContext
      > => {

      const mutationOptions = getPostUploadMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get paginated logs
 */
export const getLogs = (
    params?: GetLogsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetLogs200>> => {
    
    
    return axios.default.get(
      `/logs`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetLogsQueryKey = (params?: GetLogsParams,) => {
    return [`/logs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLogsQueryOptions = <TData = Awaited<ReturnType<typeof getLogs>>, TError = AxiosError<unknown>>(params?: GetLogsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLogs>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLogsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogs>>> = ({ signal }) => getLogs(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLogs>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLogsQueryResult = NonNullable<Awaited<ReturnType<typeof getLogs>>>
export type GetLogsQueryError = AxiosError<unknown>


/**
 * @summary Get paginated logs
 */

export function useGetLogs<TData = Awaited<ReturnType<typeof getLogs>>, TError = AxiosError<unknown>>(
 params?: GetLogsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLogs>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLogsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



