/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Log Viewer API
 * API for fetching and uploading logs
 * OpenAPI spec version: 1.0.0
 */
export type GetLogsAggregateParams = {
/**
 * Page number
 */
page?: number;
/**
 * Number of logs per page
 */
limit?: number;
/**
 * Timeframe for aggregation (hourly, daily, weekly).
 */
timeframe: GetLogsAggregateTimeframe;
/**
 * Field to aggregate (service, level, message).
 */
field: GetLogsAggregateField;
};

export type GetLogsAggregateTimeframe = typeof GetLogsAggregateTimeframe[keyof typeof GetLogsAggregateTimeframe];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLogsAggregateTimeframe = {
  hourly: 'hourly',
  daily: 'daily',
  weekly: 'weekly',
} as const;

export type GetLogsAggregateField = typeof GetLogsAggregateField[keyof typeof GetLogsAggregateField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLogsAggregateField = {
  service: 'service',
  level: 'level',
  message: 'message',
} as const;

export type GetLogsAggregate200Item = {
  /** Timestamp of the aggregation. */
  time?: string;
  /** Aggregated field value. */
  field?: string;
  /** Total count of logs for this aggregation. */
  total?: number;
};

export type GetLogsAggregate400 = {
  error?: string;
};

export type GetLogsAggregate500 = {
  error?: string;
};

export type PostUploadBody = {
  file: Blob;
};

export type PostUpload200 = {
  message?: string;
  recordsInserted?: number;
  errors?: string[];
};

export type PostUpload400 = {
  error?: string;
};

export type PostUpload500 = {
  error?: string;
};

export type GetLogsParams = {
/**
 * Page number
 */
page?: number;
/**
 * Number of logs per page
 */
limit?: number;
};

export type GetLogs200LogsItem = {
  id?: number;
  timestamp?: string;
  service?: string;
  level?: string;
  message?: string;
};

export type GetLogs200 = {
  logs?: GetLogs200LogsItem[];
};

export type DeleteLogs200 = {
  message?: string;
};

export type DeleteLogs500 = {
  error?: string;
};

